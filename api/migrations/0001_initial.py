# Generated by Django 5.0.7 on 2024-08-15 23:45

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company-logo/')),
                ('website', models.URLField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('reset_password_token', models.CharField(blank=True, max_length=100, null=True)),
                ('reset_password_expire', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='User-Avatar/')),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('bio', models.TextField(blank=True, max_length=1024, null=True)),
                ('is_hiring', models.BooleanField(default=False)),
                ('position', models.CharField(blank=True, max_length=255, null=True)),
                ('primary_skill', models.CharField(blank=True, choices=[('Animation', 'Animation'), ('Brand / Graphic Design', 'Brand / Graphic Design'), ('Illustration', 'Illustration'), ('Mobile Design', 'Mobile Design'), ('UI / Visual Design', 'UI / Visual Design'), ('Product Design', 'Product Design'), ('UX Design / Research', 'UX Design / Research'), ('Web Design', 'Web Design')], max_length=255, null=True)),
                ('is_designer', models.BooleanField(default=False)),
                ('personal_website', models.URLField(blank=True, max_length=255, null=True)),
                ('portfolio_url', models.URLField(blank=True, max_length=255, null=True)),
                ('portfolio_password', models.CharField(blank=True, max_length=255, null=True)),
                ('calendly_url', models.URLField(blank=True, max_length=255, null=True)),
                ('twitter', models.URLField(blank=True, max_length=255, null=True)),
                ('facebook', models.URLField(blank=True, max_length=255, null=True)),
                ('instagram', models.URLField(blank=True, max_length=255, null=True)),
                ('github', models.URLField(blank=True, max_length=255, null=True)),
                ('creative_market', models.URLField(blank=True, max_length=255, null=True)),
                ('codepen', models.URLField(blank=True, max_length=255, null=True)),
                ('is_team_codepen', models.BooleanField(default=False)),
                ('medium', models.URLField(blank=True, max_length=255, null=True)),
                ('is_publication_medium', models.BooleanField(default=False)),
                ('behance', models.URLField(blank=True, max_length=255, null=True)),
                ('linkedin', models.URLField(blank=True, max_length=255, null=True)),
                ('is_company_linkedin', models.BooleanField(default=False)),
                ('vimeo', models.URLField(blank=True, max_length=255, null=True)),
                ('is_pro', models.BooleanField(default=False)),
                ('verified', models.BooleanField(default=False)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to='api.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('location', models.CharField(default='', max_length=255)),
                ('workplace_type', models.CharField(choices=[('Remote', 'Remote'), ('On-site', 'On-site'), ('Hybrid', 'Hybrid')], default='Remote', max_length=50)),
                ('designer_type', models.CharField(choices=[('Animation', 'Animation'), ('Brand / Graphic Design', 'Brand / Graphic Design'), ('Illustration', 'Illustration'), ('Leadership', 'Leadership'), ('Mobile Design', 'Mobile Design'), ('UI / Visual Design', 'UI / Visual Design'), ('Product Design', 'Product Design'), ('UX Design / Research', 'UX Design / Research'), ('Web Design', 'Web Design')], default='Brand / Graphic Design', max_length=50)),
                ('employment_type', models.CharField(choices=[('Full-time employee', 'Full-time employee'), ('Freelance / Contract hire', 'Freelance / Contract hire')], default='Full-time employee', max_length=50)),
                ('application_link', models.URLField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Cjobs', to='api.company')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Pjobs', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree', models.CharField(max_length=255)),
                ('institution', models.CharField(max_length=255)),
                ('year', models.CharField(max_length=255)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='DesignRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('design_needs', models.CharField(blank=True, max_length=100, null=True)),
                ('timeline', models.CharField(choices=[('ASAP', 'ASAP'), ('Within the next month', 'Within the next month'), ('Not urgent', 'Not urgent')], max_length=50)),
                ('project_details', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Inbox', 'Inbox'), ('Archive', 'Archive')], default='Inbox', max_length=20)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='api.profile')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to='api.profile')),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='created_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='companies', to='api.profile'),
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=2000)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('design_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='api.designrequest')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blocked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocking_users', to='api.profile')),
                ('blocker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(blank=True, max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reported', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reporting_users', to='api.profile')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_users', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skills', models.CharField(max_length=100)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialties', models.CharField(choices=[('Animation', 'Animation'), ('Brand / Graphic Design', 'Brand / Graphic Design'), ('Illustration', 'Illustration'), ('Leadership', 'Leadership'), ('Mobile Design', 'Mobile Design'), ('UI / Visual Design', 'UI / Visual Design'), ('Product Design', 'Product Design'), ('UX Design / Research', 'UX Design / Research'), ('Web Design', 'Web Design')], default='', max_length=50)),
                ('years_of_experience', models.CharField(choices=[('1_2 Years', '1_2 Years'), ('3_5 Years', '3_5 Years'), ('6_8 Years', '6_8 Years'), ('+9 Years', '+9 Years')], default='', max_length=20)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specialty', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('color', models.CharField(blank=True, max_length=10, null=True)),
                ('looking_for_feedback', models.BooleanField(default=False)),
                ('in_draft', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work', to='api.profile')),
                ('related_work_group', models.ManyToManyField(blank=True, default=list, related_name='works', to='api.work')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='gallery_images/')),
                ('work', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='galleries', to='api.work')),
            ],
        ),
        migrations.AddField(
            model_name='designrequest',
            name='work',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat', to='api.work'),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaction', to='api.profile')),
                ('work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.work')),
            ],
        ),
        migrations.CreateModel(
            name='WorkAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_type', models.CharField(choices=[('full_time', 'Full-Time'), ('freelance', 'Freelance/Contract')], default='', max_length=20)),
                ('remote_preference', models.CharField(choices=[('onsite_or_remote', 'Yes'), ('remote_only', 'Remote only'), ('onsite_only', 'No')], default='', max_length=20)),
                ('visa_status', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='', max_length=3)),
                ('experience_level', models.CharField(choices=[('Junior', 'Junior'), ('Mid-level', 'Mid-level'), ('Senior', 'Senior')], default='', max_length=10)),
                ('agencies_only', models.BooleanField(default=False)),
                ('salary_range', models.CharField(blank=True, choices=[('<50k', '<50k'), ('50-60k', '50-60k'), ('60-70k', '60-70k'), ('70-80k', '70-80k'), ('80-90k', '80-90k'), ('90-100k', '90-100k'), ('100-110k', '100-110k'), ('110-120k', '110-120k'), ('120-130k', '120-130k'), ('130-140k', '130-140k'), ('140-150k', '140-150k'), ('150-170k', '150-170k'), ('170-190k', '170-190k'), ('190-220k', '190-220k'), ('220-250k', '220-250k'), ('>250k', '>250k')], max_length=20, null=True)),
                ('minimum_fixed_price_budget', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('minimum_hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('minimum_hours_for_contract', models.PositiveIntegerField(blank=True, null=True)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='workavailability', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='WorkHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=255)),
                ('company', models.CharField(max_length=255)),
                ('year', models.CharField(max_length=255)),
                ('present', models.CharField(max_length=255)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_histories', to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='WorkMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('text', models.TextField(blank=True, max_length=2000, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='work_images/')),
                ('video', models.FileField(blank=True, null=True, upload_to='work_videos/')),
                ('work', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='work_medias', to='api.work')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='api.profile')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='api.profile')),
            ],
            options={
                'unique_together': {('follower', 'following')},
            },
        ),
        migrations.CreateModel(
            name='Bookmarked',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bookmarked_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile')),
                ('bookmarker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarked_profiles', to='api.profile')),
            ],
            options={
                'unique_together': {('bookmarker', 'bookmarked_profile')},
            },
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile')),
                ('work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='api.work')),
            ],
            options={
                'unique_together': {('profile', 'work')},
            },
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile')),
                ('work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='api.work')),
            ],
            options={
                'unique_together': {('profile', 'work')},
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile')),
                ('work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='api.work')),
            ],
            options={
                'unique_together': {('profile', 'work')},
            },
        ),
    ]
